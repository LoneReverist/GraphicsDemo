#version 330 core

uniform vec3 object_color;

uniform vec3 ambient_light_color;

uniform vec3 pointlight_pos_1;
uniform vec3 pointlight_color_1;
uniform float pointlight_radius_1;

uniform vec3 pointlight_pos_2;
uniform vec3 pointlight_color_2;
uniform float pointlight_radius_2;

uniform vec3 pointlight_pos_3;
uniform vec3 pointlight_color_3;
uniform float pointlight_radius_3;

uniform vec3 spotlight_pos;
uniform vec3 spotlight_dir;
uniform vec3 spotlight_color;
uniform float spotlight_inner_radius;
uniform float spotlight_outer_radius;

in vec3 pos_world;
in vec3 normal_world;

out vec4 FragColor;

void main()
{
	vec3 normal = normalize(normal_world);

	// pointlight 1
	vec3 pos_to_light = normalize(pointlight_pos_1 - pos_world);
	float light_ratio = max(dot(normal, pos_to_light), 0.0f);
	float attenuation = pow(1.0f - max(0.0f, distance(pointlight_pos_1, pos_world) / pointlight_radius_1), 2.0f);
	vec3 diffuse_light_color = light_ratio * attenuation * pointlight_color_1;

	// pointlight 2
	pos_to_light = normalize(pointlight_pos_2 - pos_world);
	light_ratio = max(dot(normal, pos_to_light), 0.0f);
	attenuation = pow(1.0f - max(0.0f, distance(pointlight_pos_2, pos_world) / pointlight_radius_2), 2.0f);
	diffuse_light_color += light_ratio * attenuation * pointlight_color_2;

	// pointlight 3
	pos_to_light = normalize(pointlight_pos_3 - pos_world);
	light_ratio = max(dot(normal, pos_to_light), 0.0f);
	attenuation = pow(1.0f - max(0.0f, distance(pointlight_pos_3, pos_world) / pointlight_radius_3), 2.0f);
	diffuse_light_color += light_ratio * attenuation * pointlight_color_3;

	// spotlight
	pos_to_light = normalize(spotlight_pos - pos_world);
	float surface_ratio = max(0.0f, dot(-pos_to_light, spotlight_dir));
	float spot_factor = (surface_ratio > spotlight_outer_radius) ? 1 : 0;
	light_ratio = max(0.0f, dot(pos_to_light, normal_world));
	attenuation = pow(1.0f - max(0.0f, (spotlight_inner_radius - surface_ratio) / (spotlight_inner_radius - spotlight_outer_radius)), 2.0f);
	diffuse_light_color += light_ratio * attenuation * spot_factor * spotlight_color;

	vec3 frag_color = (ambient_light_color + diffuse_light_color) * object_color;
	FragColor = vec4(frag_color, 1.0);
}
